what are Interfaces?
Contract of functions
Th purpose of interface is contract.

Loose Coupling:
Story 1 - Real world
➔ Walls dont have fixed devices in building
➔ Walls have socket(interface).I
➔ Devices with appropriate plugs(Class) can run from those sockets.
➔ Walls are loosely couple with devices (means we can keep the Ac, mobile charger, Tv and so on in the sockets.)
➔ Socket is behaving like a contract or an interface.
➔ Plugs of the devices are honoring the contract of socket.


Car is loosely coupled with sony and bose.
MusicSystem  interface defines the contract.
Car has musicSystem reference (ms property) as a socket for devices(sony,bose).
Sony and Bose implements the contract defined by music system.
Car has a provision to plug new device(setMusicSystem) in the socket(ms interface).

1.Can interface have Objects ?
No, because interfaces doesn't have function body.
Interface obj = new Interface(); ✖︎✖︎
But interfaces can be used as a reference.
Interface obj = new Car();
interface Interface {
void fun();
void fun2();
}
Class client{
public static void main(s[] args){
Interface obj = new Interface(); ✖︎✖︎
}
}
Interface can only be used as a referenece on the left hand side.

2.Can interfaces have constructors ?
No, i.e; nop objects => no constructors

3.Can interface have data members ?
Yes, but the data members of interfaces can be used as constant only, which mean they are by default static and final.

4.What is the access modifier of interface methods?
Interface methods are public by default.

5. Can interfaces do multi-level inheritance?
Yes,

6.Can interfaces have multiple inheritance?
Yes,
case 1 :
I1 => fun1()
I2 => fun2()
Class c implements I1, I2 {
void fun1(){ }
void fun2(){ }
}

case 2 :
I1 => fun1()
I2 => fun1(int x)
Class c implements I1, I2 {
void fun1(){ }
void fun1(int x) { }
}
case 3:
I1 => fun1()
I2 => fun1()
Class c implements I1, I2 {
void fun1(){ }

Abstract Classes :
An in between b/w interface and classes.
so far,
interfaces are abstraction and classes are implementation.
Abstract classes are mix of two.
    1. a few functions will have definitions
    2. a few functions will only be declarations.i.e; abstraction (can be called as a contract)
Abstract on a class => no object is allowed.
Abstract on a method => no definition for this method.
Q1. If a class has even one abstract method, does the class also have to be abstract?
Yes.
If method is abstract and class is not, we can create a object. What will happen if we call abstract method with this object.

Q2. If a class is abstract,will it necessarily have one method which is abstract?
No. We can have abstract class which have all the methods available(implemented).
then what is the purpose of having such a class?
will help to have hierarchies.
Such a class is made abstract to prevent creation of extra type.

Q3. Can abstract class have objects?
No

Q4. Can abstract class have data members?
Yes.They are instance level.

Q5. Can abstract class have constructor ?
Yes.

Q6.Can we do multilevel inheritance via abstract classes?
yes.
abstract a1{
void fun() { sout("");}
abstract void fun1();
}
abstract a2{
void fun() { sout("");}
abstract void fun2();
}
Class C extends a2{
void fun1(){ sout("");}
void fun2(){ sout("");}
}

Q7.Can we do multiple inheritance via abstract classes?
No. beacuse of diamond problem.

To avoid diamond problem, Java has not allowed multiple inheritamce from classes.
Why multiple inheritance is allowed through interfaces?
Because of no implementation in interfaces and hence no diamond problem.


7. Can interface have function definition also?
8. Does a class have to provide all the functions of an interface?
9. what is diamond problem of multiple inheritance ?
10. How interfaces do avoid diamond problem?



Interface :
1.Data members are static & final
2.Can't have function definition.
3.Can't have constructors.
4.Multiple inheritance allowed.
Abstract :
1.Data members are instance level
2.Can have both abstract and non-abstract methods
3.Can have constructors.
4.Multiple inheritance not allowed.

Q.Is it necessary to implement
    All methods of interface
    All abstract methods of abstract class.
Ans :
option 1 :
either implement all of interface, implement abstarct of abstract class
option 2 :
Become abstract yourself.

Can interface have function bodies also?
OOPs say they should not have and initially java didn't allow
Since Java8, java allows interface to have function body using "default" keyword.

Why is default keyword provided in java?
To accommodate later changes to interfaces.So, that changes to interface don't break the existing codes.
If you are adding a function to an interace at a later point of time provide a definition using default.
Now existing classes need not provide body of these method.
But Avoid default keyword in interfaces because it defeats the purpose of interface.

Do interfaces suffer from diamond problem with default methods?
They should but don't

How Java8 handles diamond problem?
In Java 8, there is an issue that arises when a class implements multiple interfaces that both declare a
default method with the same signature. This is known as the "diamond problem" and occurs when a
class inherits from two classes that have a common ancestor. In Java 8, this issue specifically
relates to multiple inheritance of behavior through interfaces.
To address the diamond problem in Java 8, the language introduces the following rules:
1. It is mandatory to provide a function definition or body in the class:
If a class implements two interfaces (I1 and I2) that both declare a default method with the same
signature, the class must provide an implementation of that method. This is because Java requires
the class to disambiguate and choose which method to use.

2. Use the interface name to disambiguate :
If the class wants to use one of the default methods from a specific interface, it should use the
interface name to disambiguate. For example, I1.super.commonMethod() or I2.super.commonMethod().
